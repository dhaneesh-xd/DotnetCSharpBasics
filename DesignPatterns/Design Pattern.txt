	Creational Patterns:

		Singleton:
			Only one instance is created for a class no matter how many times you called it.
		Factory Method:
			A interface : class inherit that interface
			An abstract class with abstract method which returns that interface
			Another class inherit the abstract class.
		Abstract Factory Pattern:
			create two interfaces.
			inherit interface with required classes
			create new interface then create return method type of both interface
			create a class then inherit the 3rd interface and implement it.
			create another class create object of first 2 interfaces and call it on constructor, implement it
		Builder Method:
			Class having parameters
			interface created according to the paramters
			interface inherited to other class that uses the first class
			Another class created with method that getting the interface as input then implement interface parameter
		Prototype Pattern:
			Interface created with clone prpoerty
			Class inherit that interface and clone method returns the class object

	Structural Patterns:
		Adapter Pattern:
			Create an interface
			Implement class with required method
			create another class and inherit the interface, create object of above class in constructor (delegate)
		Bridge Pattern:
			create an interface
			implement those interface in required classes
			create an abstract class with abstract method having constructor of getting interface object
			create an another class inherit the abstraction then implement its parameter

